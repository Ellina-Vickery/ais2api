# 工作流名称
name: Publish Docker image

# 触发条件：当有代码推送到 main 分支时触发此工作流
on:
  push:
    branches: [ "main" ] # 你可以根据你的主分支名修改，也可能是 "master"

# 工作流中的任务
jobs:
  # 任务ID，可以自定义
  build_and_push:
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # 任务中的步骤
    steps:
      # 第一步：检出你的代码
      # 使用官方的 actions/checkout@v4 动作来获取你仓库的最新代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：下载并设置 Camoufox
      # 这是关键步骤，因为我们没有把浏览器二进制文件提交到Git
      - name: Download and setup Camoufox
        run: |
          echo "Downloading Camoufox..."
          # 从 Camoufox 的 GitHub 发布页面下载预编译的 Linux 版本压缩包
          # 注意：你可以检查是否有更新的版本，并替换下面的 URL
          wget https://github.com/browser-actions/camoufox/releases/download/v1.2.1/camoufox-linux.zip
          
          echo "Unzipping Camoufox..."
          # 解压下载的 .zip 文件
          unzip camoufox-linux.zip
          
          echo "Camoufox is ready."
          # 解压后，当前目录就会有一个名为 camoufox-linux 的文件夹，可供 Dockerfile 使用

      # 第三步：登录到 Docker Hub
      # 使用官方的 docker/login-action@v3 动作
      # 它会使用你在 GitHub Secrets 中存储的用户名和密码进行登录
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 第四步：提取 Docker 镜像的元数据（如标签）
      # 这个动作可以自动生成合适的标签，例如 'latest' 和基于commit SHA的唯一标签
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 将这里的 'your-dockerhub-username/your-repo-name' 替换成你自己的 Docker Hub 仓库名
          images: ellinalopez/server-cloud

      # 第五步：构建并推送 Docker 镜像
      # 使用官方的 docker/build-push-action@v5 动作
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Docker 构建的上下文路径（当前目录）
          context: .
          # 推送镜像到仓库
          push: true
          # 使用上一步生成的标签
          tags: ${{ steps.meta.outputs.tags }}
          # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }}
